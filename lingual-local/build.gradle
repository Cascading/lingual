/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
dependencies {

  compile project( ':lingual-core' )

  // include for testing from an ide
  // testRuntime project( ':lingual-client' )

  testCompile project( path: ':lingual-platform', configuration: 'testArtifacts' )

  compile group: 'cascading', name: 'cascading-local', version: cascadingVersion, changing: true

  compile group: 'log4j', name: 'log4j', version: log4jVersion
  compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion

  testCompile group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests', changing: true
  testCompile group: 'cascading', name: 'cascading-local', version: cascadingVersion, classifier: 'tests', changing: true
  testCompile group: 'cascading', name: 'cascading-platform', version: cascadingVersion, classifier: 'tests', changing: true
}

// builds a maven-shade type jar. Ant's JarJar task is an independent jar build so rather than re-write the entire file
// collection in ant terms, this code builds a gradle-style jar and uses that as the source. This also retains the
// previous Gradle FatJar-based behavior of producing a merged META-INF directory.
task fatJar( type: Jar, dependsOn: jar ) {

  description = "Assembles a shaded jar file"
  classifier = 'jdbc'

  // the lingual-client is only in runtime scope for IDE use so avoid including the lingual-client jar when building a JDBC jar
  // because the :lingual-client.jar task isn't called when building this, we can't simply use jar.archiveName since that includes
  // the internally-specified "classifier" value
  ext.clientFile = "${project( ':lingual-client' ).jar.baseName}-${project( ':lingual-client' ).jar.version}"

  doLast {
    project.ant {
      taskdef( name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath )
      jarjar( jarfile: archivePath ) {
        configurations.runtime.files.findAll { file ->
          [clientFile].every { !file.name.startsWith( it ) }
        }.each { jarjarFile ->
          zipfileset( src: jarjarFile ) {
            exclude( name: 'META-INF/*.DSA' )
            exclude( name: 'META-INF/LICENSE*' )
          }
        }
        zipfileset( src: jar.archivePath )

        neverIncludePackages.each { omitClass ->
          zap pattern: omitClass
        }
        unshadeableDependencies.each { retainClass ->
          rule pattern: retainClass, result: "@0"
        }
        shadeableDependencies.each { shadeClass ->
          rule pattern: shadeClass, result: "${shadePackagePrefix}@0"
        }
      }
    }
  }
}

artifacts {
  archives fatJar
}
