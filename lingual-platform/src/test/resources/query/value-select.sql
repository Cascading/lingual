select 1 as again,2 as "again", 3 as AGAiN from (values (true));
select 1 as c1,2 as c2 from (values(true));
select TRUE OR unknowN from (values(true));
select false AND unknown from (values(true));
select not UNKNOWn from (values(true));
select not true from (values(true));
select not false from (values(true));
select TRUE IS FALSE FROM (values(true));
select false IS NULL FROM (values(true));
select UNKNOWN IS NULL FROM (values(true));
select FALSE IS UNKNOWN FROM (values(true));
select TRUE IS NOT FALSE FROM (values(true));
select TRUE IS NOT NULL FROM (values(true));
select false IS NOT NULL FROM (values(true));
select UNKNOWN IS NOT NULL FROM (values(true));
select FALSE IS NOT UNKNOWN FROM (values(true));
select 1 IS NULL FROM (values(true));
select 1.2 IS NULL FROM (values(true));
select 1  + 1 from (values(true));
select 1  + 2.3 from (values(true));
select 1.2+3 from (values(true));
select 1.2+3.4 from (values(true));
select 1  - 1 from (values(true));
select 1  - 2.3 from (values(true));
select 1.2-3 from (values(true));
select 1.2-3.4 from (values(true));
select 1  * 2 from (values(true));
select 1.2* 3 from (values(true));
select 1  * 2.3 from (values(true));
select 1.2* 3.4 from (values(true));
select 1  / 2 from (values(true));
select 1.2/ 3 from (values(true));
select 1+-2.*-3.e-1/-4>+5 AND true from (values(true));
values (''='');
values ('abc'=n'');
values (''=_latin1'');
values (n''='');
values (n'abc'=n'');
values (n''=_latin1'');
values (_latin1''='');
values (_latin1''=n'');
values (_latin1''=_latin1'');
values (''<>'');
values ('abc'<>n'');
values (''<>_latin1'');
values (n''<>'');
values (n'abc'<>n'');
values (n''<>_latin1'');
values (_latin1''<>'');
values (_latin1'abc'<>n'');
values (_latin1''<>_latin1'');
values (unknown<>true);
values (1=1);
values (1=.1);
values (1=1e-1);
values (0.1=1);
values (0.1=0.1);
values (0.1=1e1);
values (1.1e1=1);
values (1.1e1=1.1);
values (1.1e-1=1e1);
values (''<>'');
values (1<>1);
values (1<>.1);
values (1<>1e-1);
values (0.1<>1);
values (0.1<>0.1);
values (0.1<>1e1);
values (1.1e1<>1);
values (1.1e1<>1.1);
values (1.1e-1<>1e1);
select n''=_iso-8859-1'abc' from (values(true));
select N'f'<>'''' from (values(true));
select 'foo'
'bar' from (values(true));
select 'foo'
'bar' from (values(true));
select 'foo'
'bar' from (values(true));
select 'foo'
'bar' from (values(true));
select 'foo'
'bar' from (values(true));
select 'foo' comment
 from (values(true));
values (power(2,3));
values (MOD(5             ,	
2));
values (ln(5.43  ));
values (mod(5.1, 3));
values (mod(2,5.1));
values (case 1 when 1 then 'one' end);
values (case 1 when 1 then 'one' else null end);
values (case 1 when 1 then 'one' else 'more' end);
values (case 1 when 1 then 'one' when 2 then null else 'more' end);
values (case when TRUE then 'true' else 'false' end);
values case when TRUE then 'true' else 'false' end;
values (CASE 1 WHEN 1 THEN cast(null as integer) WHEN 2 THEN null END);
values (CASE 1 WHEN 1 THEN cast(null as integer) WHEN 2 THEN cast(null as integer) END);
values (CASE 1 WHEN 1 THEN null WHEN 2 THEN cast(null as integer) END);
values (CASE 1 WHEN 1 THEN cast(null as integer) WHEN 2 THEN cast(cast(null as tinyint) as integer) END);
values (nullif(1,2));
values (coalesce('a','b'));
values ('a' = 'b');
values ('a' <> 'b');
values ('a' > 'b');
values ('a' < 'b');
values ('a' >= 'b');
values ('a' <= 'b');
values (cast('' as varchar(1))>cast('' as char(1)));
values (cast('' as varchar(1))<cast('' as char(1)));
values (cast('' as varchar(1))>=cast('' as char(1)));
values (cast('' as varchar(1))<=cast('' as char(1)));
values (cast('' as varchar(1))=cast('' as char(1)));
values (cast('' as varchar(1))<>cast('' as char(1)));
values ('a'||'b');
values (_UTF16'a'||_UTF16'b'||_UTF16'c');
values (1 between 2 and 3);
values ('a' between 'b' and 'c');
values (char_length('string'));
values (char_length(_UTF16'string'));
values (character_length('string'));
values (upper(_UTF16'sadf'));
values (lower(n'sadf'));
values (overlay('ABCdef' placing 'abc' from 1));
values (overlay('ABCdef' placing 'abc' from 1 for 3));
values (substring('a' FROM 1));
values (substring('a' FROM 1 FOR 3));
values ('a' like 'b');
values ('a' like 'b');
values ('a' similar to 'b');
values ('a' similar to 'b' escape 'c');
values (cast(null as integer), cast(null as char(1)));
values (cast(true as char(3)));
values (DATE '2004-12-01');
values (TIME '12:01:01');
values (TIME '11:59:59.99');
values (TIME '12:01:01.001');
values (TIMESTAMP '2004-12-01 12:01:01');
values (TIMESTAMP '2004-12-01 12:01:01.001');
values (CAST(DATE '2001-12-21' AS VARCHAR(10)));
values (CAST( TIMESTAMP '2001-12-21 10:12:21' AS VARCHAR(20)));
values (CAST( TIME '10:12:21' AS VARCHAR(20)));
values ({fn lcase('Foo' || 'Bar')});
values ({fn power(2, 3)});
values (1),(2),(1);
values (1,'1'),(2,'2');