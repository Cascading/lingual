/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'application'

evaluationDependsOn( ':lingual-local' )
evaluationDependsOn( ':lingual-hadoop' )

dependencies {

  providedCompile project( ':lingual-core' )

  compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.4'
  compile group: 'sqlline', name: 'sqlline', version: '1.0.9'

  runtime group: 'jline', name: 'jline', version: '1.0'

  providedCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
}

task assembleDist( dependsOn: jar ) {
  dependsOn << project( ":lingual-local" ).tasks[ "fatJar" ]
  dependsOn << project( ":lingual-hadoop" ).tasks[ "hadoopJar" ]
  dependsOn << project( ":lingual-hadoop" ).tasks[ "fatJar" ]

  ext.distDir = file( "${buildDir}/dist" )
}

assembleDist << {

  distDir.delete();
  distDir.mkdir();

  copy {
    into "${distDir}/lib"
    from configurations.runtime
    from jar.archivePath
  }

  copy {
    into "${distDir}/platform/local"
    from project( ":lingual-local" ).fatJar
  }

  copy {
    into "${distDir}/platform/hadoop"
    from project( ":lingual-hadoop" ).fatJar
  }

  copy {
    into distDir
    from( 'src/dist/etc/' ) {
      filter( ReplaceTokens, tokens: [
              'releaseVersion': "${releaseVersion}".toString()
      ] )
    }
  }

  copy {
    into "${distDir}/docs"
    from 'docs/'
  }
  copy {
    fileMode = 0755
    into "${distDir}/bin/"
    from( 'src/dist/bin/' ) {
      rename '\\.sh', ''
      filter( ReplaceTokens, tokens: [
              'location': project.s3Bucket.toString(),
              'majorVersion': majorVersion.toString()
      ] )
    }
  }
}

task packageDist( type: Tar, dependsOn: assembleDist ) {
  description = "package current build, does not run tests"

  destinationDir = file( s3Upload.source )
  compression = "GZIP"

  into( baseName ) {
    from assembleDist.distDir
  }

  s3Upload.dependsOn packageDist
}

packageDist << {

  copy {
    from( 'src/dist/util/install-lingual-client.sh' ) {
      filter( ReplaceTokens, tokens: [
              'location': project.s3Bucket.toString(),
              'majorVersion': majorVersion.toString()
      ] )
    }
    into s3Upload.source
  }

  file( "${s3Upload.source}/latest.txt" ).write( "http://${s3Upload.destination}${archiveName}" )
}

uploadArchives.enabled = false

platformTest.enabled = false

