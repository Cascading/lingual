/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
  s3AntTask
}

dependencies {
  s3AntTask 'thirdparty:awstasks:0.3'
}

task s3Upload() {

  ext.uploadFiles = [ ]
  ext.remotePath = "${project.group}/${majorVersion}/${project.name}/"

  enabled = s3Bucket != null
}

s3Upload << {
  ant.taskdef( name: 's3Upload', classname: 'dak.ant.taskdefs.S3Upload',
          classpath: configurations.s3AntTask.asPath )

  ant.s3Upload( verbose: 'true', accessId: awsAccessId, secretKey: awsSecretKey,
          bucket: s3Bucket, prefix: remotePath, publicRead: 'true' ) {

    uploadFiles.each { path ->
      fileset( file: path )
    }
  }
}
